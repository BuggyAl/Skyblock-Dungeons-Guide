/*
 * Dungeons Guide - The most intelligent Hypixel Skyblock Dungeons Mod
 * Copyright (C) 2024  cyoung06 (syeyoung)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package kr.syeyoung.dungeonsguide.launcher.loader;

import com.google.common.collect.Maps;
import com.google.common.eventbus.EventBus;
import kr.syeyoung.dungeonsguide.launcher.Main;
import net.minecraftforge.fml.common.*;
import net.minecraftforge.fml.common.versioning.ArtifactVersion;
import net.minecraftforge.fml.common.versioning.DefaultArtifactVersion;
import net.minecraftforge.fml.common.versioning.VersionParser;
import net.minecraftforge.fml.common.versioning.VersionRange;

import java.io.File;
import java.net.URL;
import java.security.cert.Certificate;
import java.util.*;
import java.util.stream.Collectors;

public class DGModContainer implements ModContainer {
    @Override
    public String getModId() {
        return "dungeons_guide";
    }

    @Override
    public String getName() {
        return "Dungeons Guide";
    }

    @Override
    public String getVersion() {
        return getMetadata().version;
    }

    @Override
    public File getSource() {
        return null;
    }

    private ModMetadata modMetadata = new ModMetadata();;
    @Override
    public ModMetadata getMetadata() {
//        modMetadata.autogenerated = false;
        modMetadata.modId = getModId();
        modMetadata.childMods = new ArrayList<>();
        modMetadata.url = "https://discord.gg/vuGsXhY5Bv";
        modMetadata.authorList = Arrays.asList("syeyoung");
        if (Main.getMain() != null && Main.getMain().getCurrentLoader() != null) {
            modMetadata.version = Main.getMain().getCurrentLoader().version();
        } else {
            modMetadata.version = "Not Loaded";
        }
        modMetadata.autogenerated = false;
        modMetadata.description = "Dungeons Guide";
        return modMetadata;
    }

    @Override
    public void bindMetadata(MetadataCollection metadataCollection) {
        modMetadata = metadataCollection.getMetadataForId("dungeons_guide", Collections.emptyMap());
    }

    @Override
    public void setEnabledState(boolean bl) {

    }

    @Override
    public List<ArtifactVersion> getDependants()
    {
        return Collections.emptyList();
    }

    @Override
    public List<ArtifactVersion> getDependencies()
    {
        return Collections.emptyList();
    }

    @Override
    public Set<ArtifactVersion> getRequirements()
    {
        return Collections.emptySet();
    }

    @Override
    public String getSortingRules() {
        return null;
    }

    @Override
    public boolean registerBus(EventBus eventBus, LoadController loadController) {
        return true;
    }

    @Override
    public boolean matches(Object object) {
        return "Dungeons Guide".equals(object);
    }

    @Override
    public Object getMod() {
        return "Dungeons Guide"; // lol
    }

    @Override
    public ArtifactVersion getProcessedVersion() {
        return new DefaultArtifactVersion(getVersion());
    }

    @Override
    public boolean isImmutable() {
        return false;
    }

    @Override
    public String getDisplayVersion() {
        return getVersion();
    }

    @Override
    public VersionRange acceptableMinecraftVersionRange() {
        return VersionParser.parseRange("[1.8.8,1.8.9]");
    }

    @Override
    public Certificate getSigningCertificate() {
        return null;
    }

    @Override
    public Map<String, String> getCustomModProperties() {
        return null;
    }

    @Override
    public Class<?> getCustomResourcePackClass() {
        return null;
    }

    @Override
    public Map<String, String> getSharedModDescriptor() {
        Map<String, String> descriptor = Maps.newHashMap();
        descriptor.put("modsystem", "DG");
        descriptor.put("id", getModId());
        descriptor.put("version", getDisplayVersion());
        descriptor.put("name", getName());
        descriptor.put("url", getMetadata().url);
        descriptor.put("authors", getMetadata().getAuthorList());
        descriptor.put("description", getMetadata().description);
        return descriptor;
    }

    @Override
    public Disableable canBeDisabled() {
        if (Main.getMain().getCurrentLoader() == null) return Disableable.NEVER;
        return Main.getMain().getCurrentLoader().isUnloadable() ? Disableable.YES : Disableable.NEVER;
    }

    @Override
    public String getGuiClassName() {
        return "kr.syeyoung.dungeonsguide.launcher.DGModGuiFactory";
    }

    @Override
    public List<String> getOwnedPackages() {
        if (Main.getMain() == null) return Collections.emptyList();
        IDGLoader loader = Main.getMain().getCurrentLoader();
        if (loader == null) return Collections.emptyList();
        if (!loader.isLoaded()) return Collections.emptyList();
        if (loader instanceof DevEnvLoader) return Collections.emptyList();
        return new ArrayList<>(((DGClassLoader)loader.getInstance().getClass().getClassLoader()).getLoadedPackages());
    }

    @Override
    public boolean shouldLoadInEnvironment() {
        return true;
    }

    @Override
    public URL getUpdateUrl() {
        return null;
    }
}
